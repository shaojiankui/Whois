---
description: 
globs: 
alwaysApply: true
---
### **UI 和 UX 设计原则（软件开发）**  

#### **视觉设计**  
- 建立清晰的 **视觉层级** 以引导用户注意力。  
- 选择 **统一的配色方案**，符合品牌形象（可向用户询问配色指南）。  
- **有效运用排版**，提升可读性并突出重点信息。  
- **保持足够的对比度** 以提高可读性（符合 **WCAG 2.1 AA** 标准）。  
- 确保应用内 **风格一致**，保持整体设计统一。  

#### **交互设计**  
- 创建 **直观的导航模式**，减少用户困惑。  
- 使用 **熟悉的 UI 组件**，降低用户的认知负担。  
- 提供 **清晰的行动召唤（CTA）**，引导用户行为。  
- 采用 **响应式设计**，确保跨设备兼容性。  
- **适当使用动画**，增强用户体验，但避免过度影响性能。  

#### **可访问性（Accessibility）**  
- 遵循 **WCAG 指南**，确保网页无障碍访问。  
- 使用 **语义化 HTML**，提升屏幕阅读器兼容性。  
- 为图片和非文本内容提供 **替代文本（Alt Text）**。  
- **确保所有交互元素可通过键盘导航**，提升可访问性。  
- 使用 **各种辅助技术** 进行测试，确保兼容性。  

#### **性能优化**  
- **优化图片和资源**，减少加载时间。  
- 对 **非关键资源使用懒加载**，提升首屏渲染速度。  
- 采用 **代码拆分（Code Splitting）**，优化初始加载性能。  
- 监测和优化 **核心 Web 指标（LCP、FID、CLS）**。  

#### **用户反馈**  
- 在交互过程中提供 **清晰的反馈机制**。  
- 对异步操作 **使用加载指示器**，防止用户误操作。  
- **提供明确的错误消息和恢复选项**，提升可用性。  
- **集成分析工具**，跟踪用户行为并识别用户痛点。  

#### **信息架构（IA）**  
- **逻辑组织内容**，让用户更容易找到所需信息。  
- 使用 **清晰的标签和分类**，提升导航体验。  
- **实现高效的搜索功能**，方便用户查找内容。  
- **创建站点地图（Sitemap）**，清晰展现整体结构。  

#### **移动优先设计（Mobile-First Design）**  
- **优先考虑移动端设计**，再逐步扩展到更大屏幕。  
- **使用适合触摸操作的界面元素**，提高交互体验。  
- **支持常见手势操作**（滑动、双指缩放等）。  
- **考虑拇指区域**，确保主要交互元素易于触摸。  

#### **一致性（Consistency）**  
- **制定并遵守设计系统**，确保界面风格统一。  
- 在整个界面中 **使用一致的术语**，避免用户困惑。  
- **保持重复元素的固定位置**，提高用户熟悉度。  
- **确保各个部分的视觉一致性**，提升整体体验。  

#### **测试与迭代（Testing & Iteration）**  
- **对关键设计决策进行 A/B 测试**，优化用户体验。  
- 使用 **热图和会话记录**，分析用户行为模式。  
- 定期 **收集用户反馈**，持续改进设计。  
- **基于数据和用户反馈持续优化设计**，迭代更新。  

#### **文档与维护（Documentation）**  
- **维护完整的风格指南**，确保团队设计一致性。  
- 记录 **设计模式和组件使用方法**，方便团队协作。  
- **创建用户流程图**，帮助理解复杂交互逻辑。  
- **整理并存储设计资产**，确保团队随时可访问。  

#### **流式布局（Fluid Layouts）**  
- 使用 **相对单位（%、em、rem）** 代替固定像素单位。  
- **采用 CSS Grid 和 Flexbox** 进行灵活布局设计。  
- **以移动端为优先**，再向更大屏幕扩展。  

#### **媒体查询（Media Queries）**  
- **使用断点（Breakpoints）** 调整不同屏幕尺寸的布局。  
- **关注内容需求**，而非仅针对特定设备优化。  
- **在不同设备和屏幕方向下测试设计**，确保适配性。  

#### **图片和多媒体（Images & Media）**  
- **使用 `srcset` 和 `sizes` 响应式图片**，优化加载。  
- **对图片和视频实现懒加载**，提升页面性能。  
- **使用 CSS 让嵌入式多媒体（如 `iframe`）自适应**，确保良好展示。  

#### **排版（Typography）**  
- **使用相对单位（em、rem）** 设置字体大小，增强灵活性。  
- **调整行高和字间距**，确保小屏幕上的可读性。  
- **采用模块化比例（Modular Scale）**，确保不同屏幕上的排版一致性。  

#### **触控目标（Touch Targets）**  
- **交互元素大小不少于 44x44 像素**，确保易于点击。  
- **提供足够的触控目标间距**，避免误触。  
- **在桌面端考虑悬停状态，在移动端考虑焦点状态**，提升交互体验。  

#### **性能优化（Performance）**  
- **优化资源**，加快移动网络下的加载速度。  
- **尽可能使用 CSS 动画**，减少 JavaScript 负担。  
- **使用关键 CSS（Critical CSS）** 优化首屏加载。  

#### **内容优先级（Content Prioritization）**  
- **优先显示关键内容**，确保移动端用户能快速获取核心信息。  
- **采用渐进式展现（Progressive Disclosure）**，按需显示次要内容。  
- **使用离屏菜单（Off-Canvas Pattern）**，优化小屏幕内容展示。  

#### **导航设计（Navigation）**  
- **采用适合移动端的导航模式**（如汉堡菜单）。  
- **确保导航支持键盘操作和屏幕阅读器**，提升可访问性。  
- **考虑使用固定导航栏（Sticky Header）**，方便用户快速访问。  

#### **表单优化（Forms）**  
- **设计适应不同屏幕的表单布局**，提升用户体验。  
- **使用合适的输入类型（如 `email`、`tel`）**，优化移动端输入体验。  
- **实现内联验证（Inline Validation）** 并提供清晰的错误提示。  

#### **测试（Testing）**  
- **使用浏览器开发工具测试响应式布局**，快速发现问题。  
- **在真实设备上测试，而不仅仅依赖模拟器**。  
- **在不同设备类型上进行可用性测试**，确保兼容性。  

💡 **始终关注最新的响应式设计技术和浏览器能力，并参考行业标准指南，不断优化 UI/UX 设计。**