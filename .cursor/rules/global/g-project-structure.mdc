---
description: 该文档详细阐述了项目的顶层目录结构, 其作用是为项目开发、部署及维护提供清晰的结构指引和模块划分参考。
globs: 
alwaysApply: false
---
# Nuxt.js 3 项目目录结构规范

本文档旨在为 Nuxt.js 3 项目提供清晰的目录结构指引和模块划分参考，以促进项目开发、部署及维护的规范性。

## 1. Nuxt 3 约定与推荐目录结构

Nuxt 3 遵循"约定优于配置"的原则，许多目录都具有特殊含义并享受自动导入等特性。

### 1.1 核心目录

-   **`.nuxt/`**: Nuxt 生成的目录，用于开发环境。**不应手动修改，通常加入 `.gitignore`。**
-   **`.output/`**: `nuxi build` 命令的输出目录，包含生产环境部署所需文件。**通常加入 `.gitignore`。**
-   **`node_modules/`**: 项目依赖。**由包管理器管理，加入 `.gitignore`。**

### 1.2 应用代码目录 (App Directory)

-   **`app.vue`**: 应用的根 Vue 组件。可选，用于定义全局布局、包裹器或自定义应用级逻辑。
-   **`assets/`**: 存放需要通过构建工具（如 Vite 或 Webpack）处理的静态资源。
    -   例如：Sass 文件、全局 CSS、图片、字体文件。
    -   引用方式：`<img src="~/assets/my-image.png">` 或 CSS `url('~/assets/my-font.woff2')`。
-   **`components/`**: Vue 组件目录。此目录下的组件会被自动导入，无需手动 `import`。
    -   **`components/global/`**: 此子目录下的组件会被注册为全局组件，可以在任何地方直接使用。
    -   建议按功能或特性组织子目录，例如 `components/ui/`, `components/UserProfile/`。
-   **`composables/`**: Vue Composition API 的组合式函数（可复用逻辑）。此目录下的 `.ts` 或 `.js` 文件会被自动导入。
    -   命名约定：通常以 `use` 开头，例如 `useCounter.ts`。
-   **`content/`**: (可选，需安装 `@nuxt/content` 模块) 用于存放 Markdown、YAML、CSV 或 JSON 文件，通过 `@nuxt/content` 模块进行管理和渲染。
-   **`layouts/`**: 布局组件。用于定义不同页面的通用结构（如页头、页脚、导航栏）。
    -   在页面组件中通过 `definePageMeta({ layout: 'custom-layout' })` 或在 `app.vue` 中使用 `<NuxtLayout>` 指定。
    -   `default.vue` 为默认布局。
-   **`middleware/`**: 路由中间件。用于在导航到特定路由前执行代码（如权限校验）。
    -   文件名即中间件名。全局中间件以 `.global.ts` 后缀结尾。
    -   在页面组件中通过 `definePageMeta({ middleware: 'auth' })` 或 `nuxt.config.ts` 中全局配置。
-   **`modules/`**: (高级用法) 自定义 Nuxt 模块。用于扩展 Nuxt 核心功能或集成第三方服务。
-   **`pages/`**: 页面组件。Nuxt 会根据此目录结构自动生成应用的路由。
    -   支持动态路由、嵌套路由等。例如 `pages/users/[id].vue`。
-   **`plugins/`**: Vue 插件和 Nuxt 插件。用于在 Vue 应用创建时执行代码，如注册全局组件/指令、集成第三方库等。
    -   文件可以有 `.client.ts` 或 `.server.ts` 后缀，以指定仅在客户端或服务端运行。
-   **`public/`**: 存放直接对外提供服务的静态资源，不会被构建工具处理。
    -   例如：`robots.txt`, `favicon.ico`, 图片等。
    -   通过根路径访问，例如 `/favicon.ico`。
-   **`server/`**: 服务端代码目录，由 Nitro 引擎驱动。
    -   **`server/api/`**: API 路由。文件系统路由，例如 `server/api/hello.ts` 会创建 `/api/hello` 接口。
    -   **`server/routes/`**: 更复杂的服务器路由，可以定义非 `/api` 前缀的路由。
    -   **`server/middleware/`**: 服务器中间件，在每个服务器请求前执行。
    -   **`server/plugins/`**: Nitro 服务器插件。
    -   **`server/utils/`**: 服务器工具函数。
-   **`utils/`**: 通用工具函数。此目录下的函数也会被自动导入。

### 1.3 配置文件

-   **`nuxt.config.ts`**: Nuxt 项目的核心配置文件。用于配置模块、插件、构建选项、运行时配置等。
-   **`app.config.ts`**: (可选) 用于管理可在运行时更新的响应式应用配置，例如主题变体、标题等，并且对 SEO 友好。
-   **`.env`**: 环境变量文件。Nuxt 3 内置支持 `.env` 文件。**应加入 `.gitignore`，并提供 `.env.example`。**
-   **`package.json`**: 项目元数据、依赖和脚本。
-   **`tsconfig.json`**: TypeScript 配置文件。Nuxt 会自动生成一个推荐配置。

### 1.4 其他文件和目录

-   **`README.md`**: 项目说明文档。
-   **`.gitignore`**: Git 忽略文件配置。
-   **`Dockerfile`**: (可选) Docker 配置文件，用于容器化部署。
-   **`error.vue`**: (可选) 自定义错误页面。放置在项目根目录。

## 2. 按特性组织代码 (Feature-based Organization)

对于中大型项目，除了利用 Nuxt 的约定目录外，还建议在 `components/`, `composables/`, `pages/`, `store/` (如果使用 Pinia 且不放在 composables) 等目录内部按特性（feature）或领域（domain）组织子目录。

例如，一个电商应用的商品模块可能包含：

-   `components/product/ProductCard.vue`
-   `components/product/ProductFilter.vue`
-   `composables/product/useProductSearch.ts`
-   `pages/products/[id].vue`
-   `pages/products/index.vue`
-   `server/api/products.get.ts`
-   `server/api/products/[id].get.ts`

这种方式有助于提高代码的内聚性和可维护性，使得不同特性的代码更加独立。

## 3. 状态管理 (Pinia)

Nuxt 3 推荐使用 Pinia 进行状态管理。Pinia stores 可以放置在：
-   `store/` 目录下，例如 `store/cart.ts`。
-   或者，由于 Pinia store 也是组合式函数，也可以放在 `composables/` 目录下，并以 `.store.ts` 后缀结尾，例如 `composables/cart.store.ts`。Nuxt 会自动导入。

---
本文档描述了 Nuxt.js 3 项目推荐的目录结构。遵循这些约定和建议有助于构建结构清晰、易于维护的应用程序。
